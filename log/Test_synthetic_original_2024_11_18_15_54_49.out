/nishome/yui/ModifiedNGD/utils/readData.py:18: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(x, dtype=torch.float32), torch.tensor(y, dtype=torch.float32)
Train info: 
 train data shape: torch.Size([512, 1]), 
 train lable shape: torch.Size([512, 1]), 
 positive / negative: 0.021206805482506752 / 0.978793203830719, 
 discrepancy norm error: 5.045955617788422e-07
Test info: 
 test data shape: torch.Size([128, 1]), 
 test lable shape: torch.Size([128, 1]), , 
 positive / negative: -0.030759211629629135 / 1.0307592153549194, 
 discrepancy norm error: 2.750667249529215e-07
Valid info: 
 valid data shape: torch.Size([128, 1]), valid lable shape: torch.Size([128, 1]), 
 positive / negative: 0.015859205275774002 / 0.9841408133506775, 
 discrepancy norm error: 2.3576444618811365e-07
torch.Size([512, 1]) torch.Size([512])
seed is  2191
---------------------------------------- MNGD ----------------------------------------
  0%|          | 0/10 [00:00<?, ?it/s]/nishome/yui/anaconda3/envs/ng/lib/python3.12/site-packages/torch/autograd/graph.py:744: UserWarning: Using backward() with create_graph=True will create a reference cycle between the parameter and its gradient which can cause a memory leak. We recommend using autograd.grad when creating the graph to avoid this. If you have to use this function, make sure to reset the .grad fields of your parameters to None after use to break the cycle and avoid the leak. (Triggered internally at /opt/conda/conda-bld/pytorch_1716905971214/work/torch/csrc/autograd/engine.cpp:1203.)
  return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
Epoch:   1
LOSS BY ALPHA:  tensor(0.0546, device='cuda:0') 512
max of Lambda2 tensor(1000., device='cuda:0')
min of Lambda2 tensor(0., device='cuda:0')
eigenvalues preserved:  8
Test train Loss:  0.05464249104261398
Test train Acc:  0.0
Test Loss:  0.0616748183965683
Test Acc:  0.0
Valid Loss:  0.05691187083721161
Valid Acc:  0.0
max of grad d_p:  tensor(0.0106, device='cuda:0')
min of grad d_p:  tensor(-0.0819, device='cuda:0')
max|min: (J_L, Jta/N)  (0.010594343766570091, 0.01059434562921524, ratio: 1.0000001192092896)|(-0.08188621699810028, -0.08188624680042267)

 check Jacobi res:  torch.Size([532609]) max:  tensor(2.9802e-08, device='cuda:0') mean:  tensor(-4.2317e-13, device='cuda:0') min:  tensor(-4.6566e-09, device='cuda:0') norm:  tensor(1.2011e-07, device='cuda:0') MSE:  tensor(2.2552e-13, device='cuda:0')
Shape check:  torch.Size([532609, 1]) torch.Size([532609, 1])

 check NTK dimension reduction res:  torch.Size([532609, 1]) max:  tensor(0.0003, device='cuda:0') mean:  tensor(3.8576e-06, device='cuda:0') min:  tensor(2.8422e-13, device='cuda:0') norm:  tensor(0.0064, device='cuda:0') MSE:  tensor(1.1976e-08, device='cuda:0')
Shape check:  torch.Size([532609, 1])
max of d_p_list:  tensor(0.0011, device='cuda:0')
min of d_p_list:  tensor(-0.0009, device='cuda:0')
Epoch:  1  
Training Loss: 0.054420211919932626
Test Loss:  0.06132175773382187
Test Acc:  0.0
Valid Loss:  0.0565769299864769
Valid Acc:  0.0
local minima detector shape:  (0,)
Preserved_eigens number check:  8
 10%|█         | 1/10 [00:02<00:21,  2.42s/it]Epoch:   2
LOSS BY ALPHA:  tensor(0.0543, device='cuda:0') 512
max of Lambda2 tensor(1000., device='cuda:0')
min of Lambda2 tensor(0., device='cuda:0')
eigenvalues preserved:  6
max of grad d_p:  tensor(0.0101, device='cuda:0')
min of grad d_p:  tensor(-0.0831, device='cuda:0')
max|min: (J_L, Jta/N)  (0.010053256526589394, 0.010053255595266819, ratio: 0.9999998807907104)|(-0.08308720588684082, -0.08308718353509903)

 check Jacobi res:  torch.Size([532609]) max:  tensor(9.7789e-09, device='cuda:0') mean:  tensor(-4.8223e-13, device='cuda:0') min:  tensor(-2.2352e-08, device='cuda:0') norm:  tensor(1.7678e-07, device='cuda:0') MSE:  tensor(3.3191e-13, device='cuda:0')
Shape check:  torch.Size([532609, 1]) torch.Size([532609, 1])

 check NTK dimension reduction res:  torch.Size([532609, 1]) max:  tensor(0.0010, device='cuda:0') mean:  tensor(8.6689e-06, device='cuda:0') min:  tensor(1.5916e-12, device='cuda:0') norm:  tensor(0.0143, device='cuda:0') MSE:  tensor(2.6913e-08, device='cuda:0')
Shape check:  torch.Size([532609, 1])
max of d_p_list:  tensor(0.0005, device='cuda:0')
min of d_p_list:  tensor(-0.0007, device='cuda:0')
Epoch:  2  
Training Loss: 0.05405893176794052
Test Loss:  0.061058737337589264
Test Acc:  0.0
Valid Loss:  0.05632311850786209
Valid Acc:  0.0
local minima detector shape:  (1,)
Preserved_eigens number check:  6
 20%|██        | 2/10 [00:04<00:19,  2.38s/it]Epoch:   3
LOSS BY ALPHA:  tensor(0.0541, device='cuda:0') 512
max of Lambda2 tensor(1000., device='cuda:0')
min of Lambda2 tensor(0., device='cuda:0')
eigenvalues preserved:  8
max of grad d_p:  tensor(0.0097, device='cuda:0')
min of grad d_p:  tensor(-0.0831, device='cuda:0')
max|min: (J_L, Jta/N)  (0.009715709835290909, 0.009715714491903782, ratio: 1.0000004768371582)|(-0.0830901563167572, -0.0830901712179184)

 check Jacobi res:  torch.Size([532609]) max:  tensor(1.4901e-08, device='cuda:0') mean:  tensor(-7.2006e-13, device='cuda:0') min:  tensor(-5.5879e-09, device='cuda:0') norm:  tensor(1.5184e-07, device='cuda:0') MSE:  tensor(2.8508e-13, device='cuda:0')
Shape check:  torch.Size([532609, 1]) torch.Size([532609, 1])

 check NTK dimension reduction res:  torch.Size([532609, 1]) max:  tensor(0.0006, device='cuda:0') mean:  tensor(6.1258e-06, device='cuda:0') min:  tensor(0., device='cuda:0') norm:  tensor(0.0103, device='cuda:0') MSE:  tensor(1.9302e-08, device='cuda:0')
Shape check:  torch.Size([532609, 1])
max of d_p_list:  tensor(0.0058, device='cuda:0')
min of d_p_list:  tensor(-0.0057, device='cuda:0')
Epoch:  3  
Training Loss: 0.05359990894794464
Test Loss:  0.060538820922374725
Test Acc:  0.0
Valid Loss:  0.05583225563168526
Valid Acc:  0.0
local minima detector shape:  (2,)
Preserved_eigens number check:  8
 30%|███       | 3/10 [00:07<00:16,  2.40s/it]Epoch:   4
LOSS BY ALPHA:  tensor(0.0536, device='cuda:0') 512
max of Lambda2 tensor(1000., device='cuda:0')
min of Lambda2 tensor(0., device='cuda:0')
eigenvalues preserved:  10
max of grad d_p:  tensor(0.0204, device='cuda:0')
min of grad d_p:  tensor(-0.0968, device='cuda:0')
max|min: (J_L, Jta/N)  (0.020428426563739777, 0.020428422838449478, ratio: 0.9999998211860657)|(-0.09680454432964325, -0.09680455923080444)

 check Jacobi res:  torch.Size([532609]) max:  tensor(1.4901e-08, device='cuda:0') mean:  tensor(-3.4447e-13, device='cuda:0') min:  tensor(-1.1176e-08, device='cuda:0') norm:  tensor(2.5435e-07, device='cuda:0') MSE:  tensor(4.7756e-13, device='cuda:0')
Shape check:  torch.Size([532609, 1]) torch.Size([532609, 1])

 check NTK dimension reduction res:  torch.Size([532609, 1]) max:  tensor(0.0006, device='cuda:0') mean:  tensor(6.1001e-06, device='cuda:0') min:  tensor(2.2737e-13, device='cuda:0') norm:  tensor(0.0121, device='cuda:0') MSE:  tensor(2.2791e-08, device='cuda:0')
Shape check:  torch.Size([532609, 1])
max of d_p_list:  tensor(0.0016, device='cuda:0')
min of d_p_list:  tensor(-0.0019, device='cuda:0')
Epoch:  4  
Training Loss: 0.0535808689892292
Test Loss:  0.060556091368198395
Test Acc:  0.0
Valid Loss:  0.055826276540756226
Valid Acc:  0.0
local minima detector shape:  (3,)
Preserved_eigens number check:  10
 40%|████      | 4/10 [00:09<00:14,  2.37s/it]Epoch:   5
LOSS BY ALPHA:  tensor(0.0536, device='cuda:0') 512
max of Lambda2 tensor(1000., device='cuda:0')
min of Lambda2 tensor(0., device='cuda:0')
eigenvalues preserved:  5
max of grad d_p:  tensor(0.0205, device='cuda:0')
min of grad d_p:  tensor(-0.0953, device='cuda:0')
max|min: (J_L, Jta/N)  (0.020482582971453667, 0.020482586696743965, ratio: 1.000000238418579)|(-0.0953405573964119, -0.09534050524234772)

 check Jacobi res:  torch.Size([532609]) max:  tensor(1.3970e-08, device='cuda:0') mean:  tensor(-4.4773e-13, device='cuda:0') min:  tensor(-5.2154e-08, device='cuda:0') norm:  tensor(3.2586e-07, device='cuda:0') MSE:  tensor(6.1182e-13, device='cuda:0')
Shape check:  torch.Size([532609, 1]) torch.Size([532609, 1])

 check NTK dimension reduction res:  torch.Size([532609, 1]) max:  tensor(0.0006, device='cuda:0') mean:  tensor(8.9188e-06, device='cuda:0') min:  tensor(0., device='cuda:0') norm:  tensor(0.0183, device='cuda:0') MSE:  tensor(3.4266e-08, device='cuda:0')
Shape check:  torch.Size([532609, 1])
max of d_p_list:  tensor(0.0003, device='cuda:0')
min of d_p_list:  tensor(-0.0007, device='cuda:0')
Epoch:  5  
Training Loss: 0.053432635962963104
Test Loss:  0.060407958924770355
Test Acc:  0.0
Valid Loss:  0.05567890405654907
Valid Acc:  0.0
local minima detector shape:  (4,)
Preserved_eigens number check:  5
 50%|█████     | 5/10 [00:11<00:11,  2.36s/it]Epoch:   6
LOSS BY ALPHA:  tensor(0.0534, device='cuda:0') 512
max of Lambda2 tensor(1000., device='cuda:0')
min of Lambda2 tensor(0., device='cuda:0')
eigenvalues preserved:  9
max of grad d_p:  tensor(0.0194, device='cuda:0')
min of grad d_p:  tensor(-0.0951, device='cuda:0')
max|min: (J_L, Jta/N)  (0.019434688612818718, 0.019434694200754166, ratio: 1.000000238418579)|(-0.09510807693004608, -0.09510810673236847)

 check Jacobi res:  torch.Size([532609]) max:  tensor(2.9802e-08, device='cuda:0') mean:  tensor(-7.2365e-13, device='cuda:0') min:  tensor(-1.4901e-08, device='cuda:0') norm:  tensor(3.1404e-07, device='cuda:0') MSE:  tensor(5.8962e-13, device='cuda:0')
Shape check:  torch.Size([532609, 1]) torch.Size([532609, 1])

 check NTK dimension reduction res:  torch.Size([532609, 1]) max:  tensor(0.0005, device='cuda:0') mean:  tensor(6.4026e-06, device='cuda:0') min:  tensor(2.0464e-12, device='cuda:0') norm:  tensor(0.0123, device='cuda:0') MSE:  tensor(2.3148e-08, device='cuda:0')
Shape check:  torch.Size([532609, 1])
max of d_p_list:  tensor(0.0004, device='cuda:0')
min of d_p_list:  tensor(-0.0005, device='cuda:0')
Epoch:  6  
Training Loss: 0.05328991636633873
Test Loss:  0.060282498598098755
Test Acc:  0.0
Valid Loss:  0.055558137595653534
Valid Acc:  0.0
std:  0.0002587903094929116 
thres:  5.359245240688324e-05
Preserved_eigens number check:  9
 60%|██████    | 6/10 [00:14<00:09,  2.38s/it]Epoch:   7
LOSS BY ALPHA:  tensor(0.0533, device='cuda:0') 512
max of Lambda2 tensor(1000., device='cuda:0')
min of Lambda2 tensor(0., device='cuda:0')
eigenvalues preserved:  7
max of grad d_p:  tensor(0.0198, device='cuda:0')
min of grad d_p:  tensor(-0.0946, device='cuda:0')
max|min: (J_L, Jta/N)  (0.019806042313575745, 0.019806044176220894, ratio: 1.0000001192092896)|(-0.09463344514369965, -0.09463347494602203)

 check Jacobi res:  torch.Size([532609]) max:  tensor(2.9802e-08, device='cuda:0') mean:  tensor(6.6480e-13, device='cuda:0') min:  tensor(-1.6764e-08, device='cuda:0') norm:  tensor(2.7602e-07, device='cuda:0') MSE:  tensor(5.1825e-13, device='cuda:0')
Shape check:  torch.Size([532609, 1]) torch.Size([532609, 1])

 check NTK dimension reduction res:  torch.Size([532609, 1]) max:  tensor(0.0004, device='cuda:0') mean:  tensor(6.9219e-06, device='cuda:0') min:  tensor(0., device='cuda:0') norm:  tensor(0.0129, device='cuda:0') MSE:  tensor(2.4192e-08, device='cuda:0')
Shape check:  torch.Size([532609, 1])
max of d_p_list:  tensor(0.0006, device='cuda:0')
min of d_p_list:  tensor(-0.0010, device='cuda:0')
Epoch:  7  
Training Loss: 0.05304479971528053
Test Loss:  0.060029082000255585
Test Acc:  0.0
Valid Loss:  0.05531135946512222
Valid Acc:  0.0
std:  0.0002056646949371684 
thres:  5.338962599635124e-05
Preserved_eigens number check:  7
 70%|███████   | 7/10 [00:16<00:07,  2.38s/it]Epoch:   8
LOSS BY ALPHA:  tensor(0.0530, device='cuda:0') 512
max of Lambda2 tensor(1000., device='cuda:0')
min of Lambda2 tensor(0., device='cuda:0')
eigenvalues preserved:  34
max of grad d_p:  tensor(0.0190, device='cuda:0')
min of grad d_p:  tensor(-0.0936, device='cuda:0')
max|min: (J_L, Jta/N)  (0.018968533724546432, 0.01896853931248188, ratio: 1.000000238418579)|(-0.09359189867973328, -0.09359190613031387)

 check Jacobi res:  torch.Size([532609]) max:  tensor(1.0245e-08, device='cuda:0') mean:  tensor(-7.1120e-13, device='cuda:0') min:  tensor(-1.4901e-08, device='cuda:0') norm:  tensor(2.3220e-07, device='cuda:0') MSE:  tensor(4.3597e-13, device='cuda:0')
Shape check:  torch.Size([532609, 1]) torch.Size([532609, 1])

 check NTK dimension reduction res:  torch.Size([532609, 1]) max:  tensor(0.0043, device='cuda:0') mean:  tensor(4.9539e-05, device='cuda:0') min:  tensor(6.5938e-12, device='cuda:0') norm:  tensor(0.1074, device='cuda:0') MSE:  tensor(2.0159e-07, device='cuda:0')
Shape check:  torch.Size([532609, 1])
max of d_p_list:  tensor(0.0007, device='cuda:0')
min of d_p_list:  tensor(-0.0008, device='cuda:0')
Epoch:  8  
Training Loss: 0.05294203758239746
Test Loss:  0.05995442345738411
Test Acc:  0.0
Valid Loss:  0.05523575469851494
Valid Acc:  0.0
std:  0.000237085366723229 
thres:  5.325805172324181e-05
Preserved_eigens number check:  34
 80%|████████  | 8/10 [00:19<00:04,  2.38s/it]Epoch:   9
LOSS BY ALPHA:  tensor(0.0529, device='cuda:0') 512
max of Lambda2 tensor(1000., device='cuda:0')
min of Lambda2 tensor(0., device='cuda:0')
eigenvalues preserved:  9
max of grad d_p:  tensor(0.0183, device='cuda:0')
min of grad d_p:  tensor(-0.0927, device='cuda:0')
max|min: (J_L, Jta/N)  (0.018308864906430244, 0.018308857455849648, ratio: 0.9999995827674866)|(-0.09268495440483093, -0.09268495440483093)

 check Jacobi res:  torch.Size([532609]) max:  tensor(1.4901e-08, device='cuda:0') mean:  tensor(-1.9914e-12, device='cuda:0') min:  tensor(-1.1176e-08, device='cuda:0') norm:  tensor(2.6113e-07, device='cuda:0') MSE:  tensor(4.9029e-13, device='cuda:0')
Shape check:  torch.Size([532609, 1]) torch.Size([532609, 1])

 check NTK dimension reduction res:  torch.Size([532609, 1]) max:  tensor(0.0003, device='cuda:0') mean:  tensor(5.0640e-06, device='cuda:0') min:  tensor(1.5703e-12, device='cuda:0') norm:  tensor(0.0097, device='cuda:0') MSE:  tensor(1.8131e-08, device='cuda:0')
Shape check:  torch.Size([532609, 1])
max of d_p_list:  tensor(0.0010, device='cuda:0')
min of d_p_list:  tensor(-0.0014, device='cuda:0')
Epoch:  9  
Training Loss: 0.05268555134534836
Test Loss:  0.059681400656700134
Test Acc:  0.0
Valid Loss:  0.054971225559711456
Valid Acc:  0.0
std:  0.0002624021014973523 
thres:  5.307898819446564e-05
Preserved_eigens number check:  9
 90%|█████████ | 9/10 [00:21<00:02,  2.39s/it]Epoch:   10
LOSS BY ALPHA:  tensor(0.0527, device='cuda:0') 512
max of Lambda2 tensor(1000., device='cuda:0')
min of Lambda2 tensor(0., device='cuda:0')
eigenvalues preserved:  28
max of grad d_p:  tensor(0.0171, device='cuda:0')
min of grad d_p:  tensor(-0.0921, device='cuda:0')
max|min: (J_L, Jta/N)  (0.017109770327806473, 0.017109768465161324, ratio: 0.9999998807907104)|(-0.09205015003681183, -0.09205013513565063)

 check Jacobi res:  torch.Size([532609]) max:  tensor(1.1176e-08, device='cuda:0') mean:  tensor(-2.6211e-13, device='cuda:0') min:  tensor(-1.4901e-08, device='cuda:0') norm:  tensor(2.5427e-07, device='cuda:0') MSE:  tensor(4.7741e-13, device='cuda:0')
Shape check:  torch.Size([532609, 1]) torch.Size([532609, 1])

 check NTK dimension reduction res:  torch.Size([532609, 1]) max:  tensor(0.0046, device='cuda:0') mean:  tensor(4.6006e-05, device='cuda:0') min:  tensor(7.1054e-13, device='cuda:0') norm:  tensor(0.0983, device='cuda:0') MSE:  tensor(1.8464e-07, device='cuda:0')
Shape check:  torch.Size([532609, 1])
max of d_p_list:  tensor(0.0005, device='cuda:0')
min of d_p_list:  tensor(-0.0007, device='cuda:0')
Epoch:  10  
Training Loss: 0.052505865693092346
Test Loss:  0.0594935268163681
Test Acc:  0.0
Valid Loss:  0.05477823317050934
Valid Acc:  0.0
std:  0.00027418838237423934 
thres:  5.289363414049149e-05
Preserved_eigens number check:  28
100%|██████████| 10/10 [00:23<00:00,  2.40s/it]100%|██████████| 10/10 [00:23<00:00,  2.38s/it]
